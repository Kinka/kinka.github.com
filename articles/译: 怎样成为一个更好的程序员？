翻译自quora http://www.quora.com/How-can-I-get-better-as-a-programmer

**1. 有自己的一些个人项目**

个人项目的范围可以从使用ninja框架的一个web服务，到捣鼓自己的游戏、操作系统等。最基本的，就是你可以找找日常生活中观察到的问题然后想想怎么用技术解决它们。

至于你能解决什么问题的一些建议，就是可以浏览下黑客马拉松的项目，比如说PennApps, MHacks 上面就有相当不错的想法。最开始作为一个学习过程，项目的想法不用太复杂。但是到最后，你应该能够大概知道对于一个给定的问题需要用什么技术来解决。比如说，你想要设计一个类似Facebook的社交网络，你首先会想到这个项目的数据模型。在这个例子中，无向图通常就是个不错的模型，用来描述一组对象之间的关系。然后，你还会有不同的选择去实现这个图。最好就要研究下什么数据库适用于哪种场景。最后你会发现关系数据库就是个不错的选择，或者如果你对新技术感兴趣的话(好吧，每个人都应该是)
，还可以试下图数据库([graph database](http://en.wikipedia.org/wiki/Graph_database))。

**2. 持续提高计算机科学基础和问题解决能力**

最后，不想你是计算机科学家，软件工程师，或者两者都是，解决问题的能力和计算机科学的基础都是非常重要的。给出一些未曾遇到过的问题，你能够基于你已所学计算机科学的知识去解决，对于软件工程师和计算机科学研究者而言都是非常必要的。在这方面有不少很好的平台。

比如解决问题的：[Brilliant | Math and science explanations, examples, and practice problems. ](http://brilliant.org/)

比如写代码的：UVa Online Judge, ICPC live archive, TopCoder, CodeForce, CodeChef, Leetcode, Hackerrank, HackerEarth, Project Euler

**3. 投入到一些开源项目中**

我想，多看看别人的代码以及其它优秀工程师是如何解决自己感兴趣的问题，是非常有效的。你可以从中学到优秀的代码惯例，如何着手处理某个特定问题以及如何跟其它人协同工作。在github上有一大堆 的开源项目。随便拉一个你感兴趣的，然后捣鼓它，做些改进然后给项目提交补丁。好的修改会得到注意然后你提交的补丁就会被加入下个修订版本。

**4. 参加一些有趣的CS课程**

如何互联网给了我们很多的资源，比如说Coursera 提供的免费在线课程可以让你获得证书。除了这些视频课程，也有很多相应的任务可以帮助提高你感兴趣领域的技术能力。有人收集了一些很好的计算机课程的任务和考试的列表，[https://github.com/prakhar1989/awesome-courses](https://github.com/prakhar1989/awesome-courses)。也许列表有些长，有很多事情需要去做。但是我是真心相信，如果有人真的跟着这些任务做了，他们最后一定会成为很优秀的程序员、软件工程师或者研究者的。

译者 Kinka
2015/01/18
