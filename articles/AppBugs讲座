从三个方面讲了Software-as-a-service系统设计方面的漏洞：

	1. side-channel, 应该可以译为旁道分析？

	中间人攻击，就算是两端使用的是https加密，但仍然能从数据大小上进行一定的分析导致信息泄漏。

	比如说搜索引擎用于提升用户体验的suggestion list, 打一个字母就会返回一串建议, 打入不同内容的时候从服务器返回的数据大小其实并不一样，从而可以从统计上分析猜测知道用户最终输入了什么搜索内容。

	2. logic-flaw

	主要是第三方支付和开放登录的例子。在协议设计上，三端（用户，商家，开放服务提供商），特别是商家与服务提供商之间，对彼此的了解很少，当然也不可能很多。所以经常会冒出校验不严格的漏洞，就算是会对内容作签名校验，
	google和amazon都被挖出过漏洞，可以冒充登录。

	这种第三方服务，使用的模型其实就是BRM(Browser Relay Message)。比如说登录，用户在浏览器上发起登录请求的时候，肯定就是通过页面间跳转，从当前网站跳到登录服务器，登录完成又返回当前网站。

	3. mobile cross-origin

	在手机终端上，虽然使用的是APP，但是实质上也是使用web service，但是要命的问题是，它使用起来其实跟浏览器使用差不多，但是same-origin的控制却不足，无法准确获取发起请求的来源，从而导致漏洞。

	比如说，自定义的协议，fbconnect://, youtube:// 等等，当然，ptlogin的一键登录就已经遭遇过这种问题。AppBugs 倒是提供了一个叫Morbs的通用解决方案，可以很好地高效率地解决这个问题--就是通过进行same-origin的控制