# Description
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

***
# Solutions
# Solution 1
直接维护两个新的链表即可。
```
/**
* Definition for singly-linked list.
* struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        ListNode *lesser, *greater, *i, *j;
        i = j = lesser = greater = NULL;
        ListNode *node = head;
        while (node != NULL) {
            if (node->val < x) {
                if (!i) {
                    i = node;
                    lesser = i;
                } else {
                    i->next = node;
                    i = node;
                }
            } else {
                if (!j) {
                    j = node;
                    greater = j;
                } else {
                    j->next = node;
                    j = node;
                }
            }
            node = node->next;
        }
        if (!lesser && greater) {
            lesser = greater;
        }
        if (i) {
            i->next = greater;
        }
        if (j) {
            j->next = NULL;
        }
        return lesser;
    }
};
```

## Solution 2 根据Linux的二级指针优化
```
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        ListNode *lesser = NULL, *greater = NULL;
        ListNode *cur = head;
        ListNode **pl = &lesser, **pg = &greater;
 
        while (cur) {
            if (cur->val < x) {
                *pl = cur;
                pl = &((*pl)->next);
            } else {
                *pg = cur;
                pg = &((*pg)->next);
            }
            cur = cur->next;
        }
        *pl = greater;
        *pg = NULL;
        return lesser;
    }
};
```